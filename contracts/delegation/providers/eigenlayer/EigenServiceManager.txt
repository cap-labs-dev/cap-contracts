// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.28;

import { IEigenServiceManager } from "../../../interfaces/IEigenServiceManager.sol";
import { IAVSDirectory } from "eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol";
import { IRewardsCoordinator } from "eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol";
import { IRegistryCoordinator } from "eigenlayer/src/interfaces/IRegistryCoordinator.sol";
import { IStakeRegistry } from "eigenlayer/src/interfaces/IStakeRegistry.sol";

import { Access } from "../../../access/Access.sol";
import { UUPSUpgradeable } from "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract EigenServiceManager is IEigenServiceManager, UUPSUpgradeable, Access, EigenServiceManagerStorage {
    bool private _eigenInitialized;

    constructor() {
        _disableInitializers();
    }

    function initialize(
        address _accessControl,
        address _avsDirectory,
        address _rewardsCoordinator,
        address _registryCoordinator,
        address _stakeRegistry
    ) external initializer {
        EigenServiceManagerStorage $ = EigenServiceManagerStorage();
        __Access_init(_accessControl);
        __UUPSUpgradeable_init();
        $.avsDirectory = _avsDirectory;
        $.rewardsCoordinator = _rewardsCoordinator;
        $.registryCoordinator = _registryCoordinator;
        $.stakeRegistry = _stakeRegistry;
    }

    /// @inheritdoc UUPSUpgradeable
    function _authorizeUpgrade(address) internal override checkAccess(bytes4(0)) { }
}
